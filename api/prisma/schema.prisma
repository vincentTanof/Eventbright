// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// declare enum
enum SaleType {
  paid
  free
}

model Events {
  event_id          Int       @id @default(autoincrement()) // Event ID
  event_name        String    // Event Name
  event_description String?   @db.Text // Event Description
  start_date        DateTime  @db.DateTime // Event Start Date
  end_date          DateTime  @db.DateTime // Event End Date
  event_slug        String?   // Event Slug (Optional)
  event_price       Decimal?  @db.Decimal(10, 0) // Event Price
  discount_price    Decimal?  @db.Decimal(10, 0) // Event Discount
  city_id           Int?      // City (For Offline)
  location          String?   @db.VarChar(100) // Location (For Offline)
  spot              Int?      // Total Seats Available
  tickets_sold      Int       @default(0) // Total Tickets Sold
  event_type_id     Int?      // Event Type -> Free / Paid
  event_category_id Int?      // Event Category
  created_by        Int       // Created by which EO (linked to User)
  updated_by        Int?      // Updated by which EO (linked to User)
  sale_type         SaleType? // Free or Paid
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime? @db.DateTime

  // Relationships
  eventType     Event_type?             @relation(fields: [event_type_id], references: [id])
  eventCategory Event_category?         @relation(fields: [event_category_id], references: [id])
  rating        Event_reviews_ratings[]
  promotions    Promotions[]
  cities        Cities?                 @relation(fields: [city_id], references: [id])
  tickets       Tickets[]
  organizer     User                    @relation("EventOrganizer", fields: [created_by], references: [id])
  updater       User?                   @relation("EventUpdater", fields: [updated_by], references: [id])

  // Newly Added Reverse Relationship
  transactions Transactions[] // Link to transactions
}


model Event_category {
  id     Int      @id @default(autoincrement())
  name   String
  events Events[]
}

model Event_type {
  id     Int      @id @default(autoincrement())
  name   String
  events Events[]
}

model Event_reviews_ratings {
  id       Int     @id @default(autoincrement())
  event_id Int
  user_id  Int
  comments String?
  rating   Int?
  events   Events  @relation(fields: [event_id], references: [event_id])
}

model Countries {
  id      Int       @id @default(autoincrement())
  name    String
  regions Regions[]
}

model Regions {
  id          Int       @id @default(autoincrement())
  country_id  Int
  region_name String
  countries   Countries @relation(fields: [country_id], references: [id])
  cities      Cities[]
}

model Cities {
  id        Int      @id @default(autoincrement())
  region_id Int
  city_name String
  regions   Regions  @relation(fields: [region_id], references: [id])
  events    Events[]
}

model Transactions {
  id                Int       @id @default(autoincrement())
  code              String
  user_id           Int
  event_id          Int
  qty               Int
  tax               Decimal   @db.Decimal(10, 0)
  point_used        Decimal?  @db.Decimal(10, 0)
  total_amount      Decimal   @db.Decimal(10, 0)
  voucher_id        Int? // Optional relationship to Vouchers
  payment_method_id Int // Mandatory relationship to Payment_method
  status            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  // Relationships
  user           User           @relation(fields: [user_id], references: [id])
  payment_method Payment_method @relation(fields: [payment_method_id], references: [id])
  voucher        Vouchers?      @relation(fields: [voucher_id], references: [id]) // Newly added
  tickets        Tickets[] // Relationship to tickets
  events         Events         @relation(fields: [event_id], references: [event_id]) // Event details
}

model User {
  id                        Int               @id @default(autoincrement())
  fullname                  String
  email                     String            @unique
  phone_number              String?           @unique
  password                  String
  referral_code             String?           @unique
  role_id                   Int               @default(1) // Default to 'customer'
  is_approved               Boolean?          @default(false) // Approval for event organizer
  total_point               Decimal           @db.Decimal(10, 0)
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  deletedAt                 DateTime?         @db.DateTime
  transactions              Transactions[]
  vouchers                  Vouchers[]
  tickets                   Tickets[]
  points                    Points[]
  role                      Roles             @relation(fields: [role_id], references: [id])
  referralHistoryAsReferrer ReferralHistory[] @relation("Referrer")
  referralHistoryAsReferred ReferralHistory[] @relation("ReferredUser")

  // Relationships to Events
  createdEvents Events[] @relation("EventOrganizer")
  updatedEvents Events[] @relation("EventUpdater")

  // Relationships to Organizer Requests
  organizerRequests OrganizerRequests[]
}

model OrganizerRequests {
  id        Int      @id @default(autoincrement())
  user_id   Int // References the User making the request
  name      String // Name of the requester
  reason    String // Reason provided by the user
  status    String   @default("pending") // Status: "pending", "approved", "declined"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [user_id], references: [id])
}

model Roles {
  id   Int    @id @default(autoincrement())
  name String @unique // Examples: "customer", "event-organizer", "admin"
  user User[]
}

model ReferralHistory {
  id             Int      @id @default(autoincrement())
  referrerId     Int // Referrer's user ID
  referredUserId Int // Referred user's ID
  createdAt      DateTime @default(now())
  referrer       User     @relation("Referrer", fields: [referrerId], references: [id])
  referredUser   User     @relation("ReferredUser", fields: [referredUserId], references: [id])
}

model Promotions {
  id         Int        @id @default(autoincrement())
  event_id   Int?
  name       String
  type       String
  image      String?
  is_banner  Boolean
  start_date DateTime   @db.DateTime
  end_date   DateTime   @db.DateTime
  created_by Int
  updated_by Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?  @db.DateTime
  events     Events?    @relation(fields: [event_id], references: [event_id])
  vouchers   Vouchers[]
}

model Vouchers {
  id             Int       @id @default(autoincrement())
  promotion_id   Int?
  user_id        Int?
  payment_method Int?
  voucher_code   String
  qty            Int
  type           String
  category       String
  amount         Int
  status         Boolean
  start_date     DateTime  @db.DateTime
  end_date       DateTime  @db.DateTime
  created_by     Int?
  updated_by     Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relationships
  user         User?          @relation(fields: [user_id], references: [id])
  promotions   Promotions?    @relation(fields: [promotion_id], references: [id])
  transactions Transactions[] // Added reverse relation to Transactions
}

model Payment_method {
  id           Int            @id @default(autoincrement())
  name         String
  admin_fee    Decimal        @db.Decimal(10, 0)
  transactions Transactions[]
}

model Points {
  id         Int      @id @default(autoincrement())
  user_id    Int
  point      Decimal  @db.Decimal(10, 0)
  expired_at DateTime @db.DateTime
  users      User     @relation(fields: [user_id], references: [id])
}

model Tickets {
  id             Int          @id @default(autoincrement())
  transaction_id Int
  user_id        Int
  event_id       Int
  code           String
  status         String
  valid_until    DateTime     @db.DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?    @db.DateTime
  transaction    Transactions @relation(fields: [transaction_id], references: [id])
  users          User         @relation(fields: [user_id], references: [id])
  events         Events       @relation(fields: [event_id], references: [event_id])
}
